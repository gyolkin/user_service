"""env and domain - enum types

Revision ID: 174bf904dff2
Revises: 3b4e323b9a74
Create Date: 2024-05-05 20:21:58.296901

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from user_service.application.models.user import UserDomain, UserEnv


# revision identifiers, used by Alembic.
revision: str = '174bf904dff2'
down_revision: Union[str, None] = '3b4e323b9a74'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """ADJUSTED!!! Grigory Yolkin --- 20:28 05.05.2024"""
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    if bind.dialect.name == 'postgresql':
        userenv = postgresql.ENUM(*(e.value for e in UserEnv), name="userenv")
        userenv.create(bind, checkfirst=True)
        op.alter_column('user', 'env', type_=userenv, postgresql_using='env::userenv')

        userdomain = postgresql.ENUM(*(e.value for e in UserDomain), name="userdomain")
        userdomain.create(bind, checkfirst=True)
        op.alter_column('user', 'domain', type_=userdomain, postgresql_using='domain::userdomain')
    # ### end Alembic commands ###


def downgrade() -> None:
    """ADJUSTED!!! Grigory Yolkin --- 20:28 05.05.2024"""
    bind = op.get_bind()
    # ### commands auto generated by Alembic - please adjust! ###
    if bind.dialect.name == 'postgresql':
        userenv = postgresql.ENUM(UserEnv, name="userenv")
        userenv.drop(bind)
        op.alter_column('user', 'env', type_=sa.String())

        userdomain = postgresql.ENUM(UserDomain, name="userdomain")
        userdomain.drop(bind)
        op.alter_column('user', 'domain', type_=sa.String())
    # ### end Alembic commands ###
